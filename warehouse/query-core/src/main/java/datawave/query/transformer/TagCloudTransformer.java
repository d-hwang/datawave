package datawave.query.transformer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.security.Authorizations;

import datawave.core.query.logic.BaseQueryLogicTransformer;
import datawave.marking.MarkingFunctions;
import datawave.marking.MarkingFunctions.Exception;
import datawave.microservice.query.Query;
import datawave.query.table.parser.KeywordKeyValueFactory;
import datawave.query.tables.keyword.KeywordQueryState;
import datawave.util.keyword.KeywordResults;
import datawave.util.keyword.TagCloud;
import datawave.util.keyword.TagCloudEntry;
import datawave.webservice.query.result.event.ResponseObjectFactory;
import datawave.webservice.result.BaseQueryResponse;
import datawave.webservice.result.keyword.TagCloudBase;
import datawave.webservice.result.keyword.TagCloudEntryBase;
import datawave.webservice.result.keyword.TagCloudResponseBase;

/** Transforms the Key/Values returned by the KeywordExtractionIterator into KeywordResults and then Tag Clouds Responses */
@SuppressWarnings("rawtypes")
public class TagCloudTransformer extends BaseQueryLogicTransformer<Entry<Key,Value>,KeywordResults> {

    protected final Authorizations auths;
    protected final ResponseObjectFactory responseObjectFactory;
    protected final KeywordQueryState state;

    public TagCloudTransformer(Query query, KeywordQueryState state, MarkingFunctions markingFunctions, ResponseObjectFactory responseObjectFactory) {
        super(markingFunctions);
        this.auths = new Authorizations(query.getQueryAuthorizations().split(","));
        this.responseObjectFactory = responseObjectFactory;
        this.state = state;
    }

    /**
     * Transform results from the KeywordExtractingIterator into Events that will then be used for generating the response in createResponse()
     *
     * @param entry
     *            a
     * @return KeywordResults object containing the transformed entry.
     */
    @Override
    public KeywordResults transform(Entry<Key,Value> entry) {
        // each contains the serialized keywords for individual documents.
        if (entry.getKey() == null && entry.getValue() == null) {
            return null;
        }

        if (null == entry.getKey() || null == entry.getValue()) {
            throw new IllegalArgumentException("Null key or value. Key:" + entry.getKey() + ", Value: " + entry.getValue());
        }

        try {
            final KeywordKeyValueFactory.KeywordKeyValue kkv = KeywordKeyValueFactory.parse(entry.getKey(), entry.getValue(), auths, markingFunctions);
            final KeywordResults keywordResults = KeywordResults.deserialize(kkv.getContents());
            final String identifier = state.getIdentifierMap().get(keywordResults.getSource());
            if (identifier != null) {
                // update the source from the identifier map.
                keywordResults.setSource(identifier);
            }

            // todo: preserve shard, datatype, uid, markings, timestamp?

            return keywordResults;
        } catch (Exception | IOException e1) {
            throw new IllegalArgumentException("Unable to parse keyword extraction results", e1);
        }
    }

    /**
     * Transform a list of results generated by the transform method into a query response. The nature of the response is based on the query configuration
     *
     * @param resultList
     *            the results to add to the response that were created by the transform method
     * @return a tag cloud response
     */
    @Override
    public BaseQueryResponse createResponse(List<Object> resultList) {
        //@formatter:off
        final List<KeywordResults> keywordResultsList = resultList.stream().map(o -> (KeywordResults) o).collect(Collectors.toList());
        return state.isGenerateCloud() ?
                createMergedCloudResponse(keywordResultsList) :
                createIndividualCloudResponse(keywordResultsList);
        //@formatter:on
    }

    /**
     * Transform a list of results generated by the transform method into a query response containing tag clouds for individual documents potentially grouped by
     * language.
     *
     * @param resultList
     *            the results to add to the response that were created by the transform method
     * @return a tag cloud response that includes one or more tag clouds.
     */
    protected TagCloudResponseBase createIndividualCloudResponse(List<KeywordResults> resultList) {
        // collect the results for individual documents into individual word clouds.
        List<TagCloud> wordCloudResults = new ArrayList<>();
        for (KeywordResults result : resultList) {
            final TagCloud.Builder builder = getTagCloudBuilder();
            builder.addResults(result);
            wordCloudResults.addAll(builder.build());
        }
        return generateTagCloudResponse(wordCloudResults);
    }

    /**
     * Transform a list of results generated by the transform method into a query response. This method merges results for all documents returned into one or
     * more tag clouds potentially grouped by language and ordered by frequency.
     *
     * @param resultList
     *            the results to add to the response that were created by the transform method
     * @return a tag cloud response that includes one or more tag clouds.
     */
    protected TagCloudResponseBase createMergedCloudResponse(List<KeywordResults> resultList) {
        // collect the keywords for individual documents into a single word cloud.
        final TagCloud.Builder builder = getTagCloudBuilder().withComparator(TagCloudEntry.ORDER_BY_FREQUENCY);
        for (KeywordResults result : resultList) {
            builder.addResults(result);
        }
        return generateTagCloudResponse(builder.build());
    }

    /**
     * Get a configured tag cloud builder
     *
     * @return a configured tag clud builder.
     */
    protected TagCloud.Builder getTagCloudBuilder() {
        final TagCloud.Builder builder = new TagCloud.Builder();
        if (state.getMaxCloudTags() > 0) {
            builder.withMaxTags(state.getMaxCloudTags());
        }
        if (state.isLanguagePartitioned()) {
            builder.withLanguagePartitions(true);
        }
        return builder;
    }

    /**
     * Transform a list of one or more wordCloudResults into the necessary tag-cloud response type
     *
     * @param tagCloudResultsList
     *            the results to convert, each representing the results for a single document.
     * @return a tag cloud response that includes one or more tag clouds.
     */
    @SuppressWarnings("unchecked")
    protected TagCloudResponseBase generateTagCloudResponse(List<TagCloud> tagCloudResultsList) {
        TagCloudResponseBase response = responseObjectFactory.getTagCloudQueryResponse();
        List<TagCloudBase> tagClouds = new ArrayList<>();
        for (TagCloud tagCloudResult : tagCloudResultsList) {
            TagCloudBase tagCloud = responseObjectFactory.getTagCloud();
            if (!tagCloudResult.getName().isBlank()) {
                tagCloud.setLanguage(tagCloudResult.getName());
            }
            tagCloud.setTags(generateTagCloudEntries(tagCloudResult));
            tagClouds.add(tagCloud);
        }
        response.setTagClouds(tagClouds);
        return response;
    }

    /**
     * Transform a single wordCloudResult into the necessary tag-cloud response type
     *
     * @param wordCloudResults
     *            the results to convert, each representing the results for a single document.
     * @return a list of tag cloud entries to be added to a tag cloud.
     */
    @SuppressWarnings("unchecked")
    protected List<TagCloudEntryBase> generateTagCloudEntries(TagCloud wordCloudResults) {
        List<TagCloudEntryBase> tagCloudEntries = new ArrayList<>();
        for (TagCloudEntry entry : wordCloudResults.getResults()) {
            TagCloudEntryBase tagCloudEntry = responseObjectFactory.getTagCloudEntry();
            tagCloudEntry.setScore(entry.getScore());
            tagCloudEntry.setFrequency(entry.getFrequency());
            tagCloudEntry.setTerm(entry.getKeyword());
            tagCloudEntry.setSources(entry.getSources());
            tagCloudEntries.add(tagCloudEntry);
        }
        return tagCloudEntries;
    }
}
